<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN" "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<!--
Adaptation de sun_checks.xml avec :
# relaxation de certaines règles jugées ou bien vraiment non pertinentes ou non réalistes à mettre en oeuvre dans notre contexte.
# adjonction de quelques spécifités propres à VSCT
# réévaluation des niveaux de sévérité :
## error :
### erreur grave (bogue) conduisant à des défaillances en production
### erreur conduisant à des difficultés majeures de maintenance ou d'exploitation
### erreur portant sur des points qui déchaînent les passions et sur lesquelles il n'est pas politiquement correct de se montrer permissif (ex. : le nommage des packages)
## warning : erreur moins grave : ex. : code un peu inefficace (notamment des new inutiles), maladresses diverses et manques de rigueur ne conduisant pas à des défaillances de la production 
## info : il peut ne pas s'agir d'erreurs à proprement parler mais plutôt de points que l'on souhaite faire remarquer.
-->
<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->
<module name="Checker">
  <!-- Checks that a package.html file exists for each package.     -->
  <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
  <module name="PackageHtml">
    <property name="severity" value="${severity.info.consideredas}"/>
  </module>
  <!-- Checks whether files end with a new line.                        -->
  <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
  <!--
Inapplicable en pratique sur des projets déjà existants.
-->
  <!--
  <module name="NewlineAtEndOfFile"/>
-->
  <!-- Checks that property files contain the same keys.         -->
  <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
  <!--
  <module name="Translation"/>
-->
  <module name="TreeWalker">
    <property name="cacheFile" value="target/checkstyle_cachefile"/>
    <property name="tabWidth " value="4"/>
    <!-- Checks for Javadoc comments.                     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
    <!--
    <module name="JavadocMethod"/>
    <module name="JavadocType"/>
    <module name="JavadocVariable"/>
-->
    <module name="JavadocStyle">
      <!--
Intéressant de mettre true pour les deux propriétés mais cela génère trop de
warnings en pratique.
-->
      <property name="checkEmptyJavadoc" value="false"/>
      <property name="checkFirstSentence" value="false"/>
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <!-- Checks for Naming Conventions.                  -->
    <!-- See http://checkstyle.sf.net/config_naming.html -->
    <!--
Checkstyle ne sait pas faire la différence entre les "compile-time constants" et
les autres variables static final. Or ce devraient être les "compile-time
constants" qui devraient être en majuscules, vu qu'elles sont traitées de façon
très particulière par le compilateur à la différence des autres.
Nous avons donc mis le check en commentaire.
-->
    <!--
    <module name="ConstantName"/>
-->
    <module name="LocalFinalVariableName">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="LocalVariableName">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <!--
	 Les conventions de nommage que nous employons dans nos projets sont moins
restrictives que celles exposées dans la convention Sun et ce pour des raisons
tout à fait acceptables.
-->
    <module name="MemberName">
      <property name="applyToPublic" value="true"/>
      <property name="applyToProtected" value="false"/>
      <property name="applyToPackage" value="false"/>
      <property name="applyToPrivate" value="false"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="MemberName">
      <property name="format" value="^_?[a-z][a-zA-Z0-9]*_?$"/>
      <property name="applyToPublic" value="false"/>
      <property name="applyToProtected" value="true"/>
      <property name="applyToPackage" value="true"/>
      <property name="applyToPrivate" value="true"/>
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="MethodName">
      <property name="format" value="^[a-z][a-zA-Z0-9]*_{0,2}$"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="PackageName">
      <property name="format" value="^(?:fr|com|net|org)(?:\.[a-z][a-zA-Z0-9_]*)*$"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="ParameterName">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="StaticVariableName">
      <property name="format" value="^_{0,2}[a-z][a-zA-Z0-9]*_{0,2}$"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="TypeName">
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <!-- Checks for Headers                                -->
    <!-- See http://checkstyle.sf.net/config_header.html   -->
    <!-- <module name="Header">                            -->
    <!-- The follow property value demonstrates the ability     -->
    <!-- to have access to ANT properties. In this case it uses -->
    <!-- the ${basedir} property to allow Checkstyle to be run  -->
    <!-- from any directory within a project. See property      -->
    <!-- expansion,                                             -->
    <!-- http://checkstyle.sf.net/config.html#properties        -->
    <!-- <property                                              -->
    <!--     name="headerFile"                                  -->
    <!--     value="${basedir}/java.header"/>                   -->
    <!-- </module> -->
    <!-- Following interprets the header file as regular expressions. -->
    <!-- <module name="RegexpHeader"/>                                -->
    <!-- Checks for imports                              -->
    <!-- See http://checkstyle.sf.net/config_import.html -->
    <module name="AvoidStarImport">
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="IllegalImport">
      <property name="severity" value="${severity.error.consideredas}"/>
      <property name="illegalPkgs" value="${illegal.imports}"/>
    </module>
    <!-- defaults to sun.* packages -->
    <module name="RedundantImport">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="UnusedImports">
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="LineLength">
      <property name="max" value="120"/>
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <!-- Règles déjà vérifiées par PMD
    <module name="MethodLength"/>
    <module name="ParameterNumber"/>
-->
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <!--
    <module name="EmptyForIteratorPad"/>
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter"/>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
-->
    <!--
    <module name="TabCharacter"/>
-->
    <!--
A activer si l'on est obsédé par les problèmes de mise en forme.
En pratique, génère trop de warnings.
-->
    <!--
    <module name="WhitespaceAfter"/>
-->
    <!--
    <module name="WhitespaceAround"/>
-->
    <!-- Modifier Checks                                    -->
    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
    <module name="ModifierOrder">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <!--
A noter que Checkstyle ne gère pas très bien cette règle, certaines erreurs
remontées avec des classes final étant vraiment injustifiées.
C'est pourquoi nous avons choisi le niveau de sévérité info.
-->
    <module name="RedundantModifier">
      <property name="severity" value="${severity.info.consideredas}"/>
    </module>
    <!-- Checks for blocks. You know, those {}'s         -->
    <!-- See http://checkstyle.sf.net/config_blocks.html -->
    <!--
    <module name="AvoidNestedBlocks"/>
-->
    <!--
Les cas listés ci-dessous de blocs vides sont toujours pathologiques ; pour ce
qui est des autres c'est discutable.
-->
    <module name="EmptyBlock">
      <property name="tokens" value="INSTANCE_INIT, STATIC_INIT, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_TRY"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <!--
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>
-->
    <!-- Checks for common coding problems               -->
    <!-- See http://checkstyle.sf.net/config_coding.html -->
    <!--
    <module name="AvoidInlineConditionals"/>
-->
    <module name="DoubleCheckedLocking">
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="EmptyStatement">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="EqualsHashCode">
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="HiddenField">
      <property name="ignoreSetter" value="true"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="IllegalInstantiation">
      <property name="classes" value="java.lang.Boolean, java.util.GregorianCalendar"/>
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="IllegalThrows">
      <property name="illegalClassNames" value="java.lang.Error, java.lang.InternalError, java.lang.RuntimeException, java.lang.Throwable"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="IllegalTokenText">
      <property name="tokens" value="STRING_LITERAL"/>
      <property name="format" value="${illegal.string.literal.pattern}"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="IllegalType">
      <property name="tokens" value="METHOD_DEF,PARAMETER_DEF"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="IllegalType">
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <!--
    <module name="InnerAssignment"/>
-->
    <!--
Dans une majorité de cas, il n'y a aucun inconvénient à utiliser des constantes
entières en dur. Ex. : par exemple pour fixer la taille initiale d'une
collection ou d'un StringBuffer/StringBuilder : ici c'est même plutôt un bon
style de programmation.
-->
    <!--
    <module name="MagicNumber"/>
-->
    <!--
Nous avons assisté à l'émergence en 2006 d'un nouveau courant qui consiste à ne
plus déclarer les constructeurs.
On ne peut donc plus mettre décemment le niveau de sévérité "error".
-->
    <module name="MissingCtor">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="MissingSwitchDefault">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="RedundantThrows">
      <property name="allowUnchecked" value="true"/>
      <property name="severity" value="${severity.info.consideredas}"/>
    </module>
    <module name="SimplifyBooleanExpression">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="SimplifyBooleanReturn">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <!-- Checks for class design                         -->
    <!-- See http://checkstyle.sf.net/config_design.html -->
    <!--
    <module name="DesignForExtension"/>
-->
    <module name="FinalClass">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="HideUtilityClassConstructor">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <!--
    <module name="InterfaceIsType"/>
-->
    <module name="VisibilityModifier">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="ArrayTypeStyle"/>
    <module name="DescendantToken">
      <property name="tokens" value="EQUAL,NOT_EQUAL,GE,GT,LE,LT"/>
      <property name="limitedTokens" value="NUM_DOUBLE,NUM_FLOAT"/>
      <property name="maximumNumber" value="0"/>
      <property name="maximumDepth" value="1"/>
      <property name="maximumMessage" value="Do never compare doubles with comparison operators, use alternative ways such as MathUtils (TechServices)"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <!--
    <module name="FinalParameters"/>
-->
    <!--
    <module name="GenericIllegalRegexp">
      <property name="format" value="\s+$"/>
      <property name="message" value="Line has trailing spaces."/>
    </module>
-->
    <module name="GenericIllegalRegexp">
      <property name="format" value="\.concat\("/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Never use String.concat(String), use rather operator +: more concise and far more efficient with constant strings."/>
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="GenericIllegalRegexp">
      <property name="format" value="\.getTime\(\)\.getTime\(\)"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Use java.util.Calendar.getTimeInMillis() instead."/>
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="GenericIllegalRegexp">
      <property name="format" value="\.printstacktrace\(\)|System\.out\.print"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Use a logger instead (or, at worst, log to System.err)."/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="GenericIllegalRegexp">
      <property name="format" value="Boolean\.getBoolean\(String\)|Integer\.getInteger\(String\)"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Do never use theses methods: they unexpectedly read system properties!"/>
      <property name="severity" value="${severity.error.consideredas}"/>
    </module>
    <module name="GenericIllegalRegexp">
      <property name="format" value="new Date\(\)\.getTime\(\)"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Say instead System.currentTimeMillis()."/>
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <module name="GenericIllegalRegexp">
      <property name="format" value="new Integer"/>
      <property name="ignoreComments" value="true"/>
      <property name="message" value="Consider alternative and more efficient ways: Integer.parseInt(String), IntegerUtils.valueOf(int) (TechServices), Integer.valueOf(int) (JDK1.5)."/>
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
    <!--
    <module name="TodoComment"/>
-->
    <module name="UpperEll">
      <property name="severity" value="${severity.warning.consideredas}"/>
    </module>
  </module>
</module>
